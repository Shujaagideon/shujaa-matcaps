{"id":"src/shaders/lightfrag.glsl","dependencies":[{"name":"C:\\Users\\shuja\\OneDrive\\Desktop\\shujaahtml-files\\portfolioProjects\\quickMatProject\\package.json","includedInParent":true,"mtime":1618988003911}],"generated":{"js":"module.exports = \"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D matcap;\\nuniform sampler2D matcap2;\\nuniform vec4 resolution;\\nuniform vec3 light;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 vView;\\nvarying vec3 vWorld;\\n\\nfloat getScatter(vec3 campos, vec3 dir, vec3 lightpos, float dist){\\n    vec3 q = campos - lightpos;\\n\\n    float b = dot(dir, q);\\n    float c = dot(q, q);\\n\\n    float t = c- b*b;\\n    float s = 1./sqrt(max(0.0001,t));\\n    float l = s*(atan((dist+b)*s) - atan(b*s));\\n\\n    return pow(max(0., l/15.), 0.4);\\n}\\n\\nvoid main(){\\n    // lighting\\n    vec3 camtwo = vWorld- cameraPosition;\\n    vec3 ctwd = normalize(camtwo);\\n    float cmtwdist = length(camtwo);\\n\\n    vec3 lightdir = normalize(light - vWorld);\\n    float diff = max(0.,dot(vNormal, lightdir));\\n    float dist = length(light -vPosition);\\n\\n    float scatter = getScatter(cameraPosition,camtwo, light, cmtwdist);\\n\\n    // // gl_FragColor = color1;\\n    // gl_FragColor = vec4(scatter,0.,0.,1.);\\n\\n    vec3 luminanceVector = vec3(0.2125, 0.7154, 0.0721);\\n    vec4 c = texture2D(matcap, light.xy)*1.8;\\n\\n    float luminance = dot(luminanceVector, c.xyz);\\n    luminance = max(0.0, luminance - 0.05);\\n    c.xyz *= sign(luminance);\\n    c.a = 1.;\\n\\n    gl_FragColor = c+scatter;\\n}\\n\\n\";"},"sourceMaps":{"js":{"mappings":[{"name":"module","generated":{"line":1,"column":0},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":6},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":6}},{"name":"exports","generated":{"line":1,"column":7},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":7}},{"generated":{"line":1,"column":14},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":0}},{"generated":{"line":1,"column":17},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":15}},{"generated":{"line":1,"column":1354},"source":"src/shaders/lightfrag.glsl","original":{"line":1,"column":0}}],"sources":{"src/shaders/lightfrag.glsl":"module.exports=\"#define GLSLIFY 1\\nuniform float time;\\nuniform float progress;\\nuniform sampler2D matcap;\\nuniform sampler2D matcap2;\\nuniform vec4 resolution;\\nuniform vec3 light;\\nvarying vec2 vUv;\\nvarying vec3 vPosition;\\nvarying vec3 vNormal;\\nvarying vec3 vView;\\nvarying vec3 vWorld;\\n\\nfloat getScatter(vec3 campos, vec3 dir, vec3 lightpos, float dist){\\n    vec3 q = campos - lightpos;\\n\\n    float b = dot(dir, q);\\n    float c = dot(q, q);\\n\\n    float t = c- b*b;\\n    float s = 1./sqrt(max(0.0001,t));\\n    float l = s*(atan((dist+b)*s) - atan(b*s));\\n\\n    return pow(max(0., l/15.), 0.4);\\n}\\n\\nvoid main(){\\n    // lighting\\n    vec3 camtwo = vWorld- cameraPosition;\\n    vec3 ctwd = normalize(camtwo);\\n    float cmtwdist = length(camtwo);\\n\\n    vec3 lightdir = normalize(light - vWorld);\\n    float diff = max(0.,dot(vNormal, lightdir));\\n    float dist = length(light -vPosition);\\n\\n    float scatter = getScatter(cameraPosition,camtwo, light, cmtwdist);\\n\\n    // // gl_FragColor = color1;\\n    // gl_FragColor = vec4(scatter,0.,0.,1.);\\n\\n    vec3 luminanceVector = vec3(0.2125, 0.7154, 0.0721);\\n    vec4 c = texture2D(matcap, light.xy)*1.8;\\n\\n    float luminance = dot(luminanceVector, c.xyz);\\n    luminance = max(0.0, luminance - 0.05);\\n    c.xyz *= sign(luminance);\\n    c.a = 1.;\\n\\n    gl_FragColor = c+scatter;\\n}\\n\\n\";"},"lineCount":null}},"error":null,"hash":"289f73b234b887978b56fa46517c28d5","cacheData":{"env":{}}}